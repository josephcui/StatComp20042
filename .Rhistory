df
iris
df$Species = c(rep(1,50),rep(-1,50))
df
df
usethis::use_data(df,MyData)
df
sample(1000)
df
usethis::use_data(mydataset, df, overwrite = T)
usethis::use_data(df, mydata, overwrite = T)
df
MyData = df
usethis::use_data(MyData, overwrite = T)
usethis::use_data(MyData, overwrite = T)
load("D:/Development/StatComp20042/data/MyData.rda")
MyData
install.packages("sinew")
sinew::makeOxygen(MyData, add_fields = "source")
?iris
devtools::document()
MyData
devtools::check()
devtools::build()
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(StatComp20042)
w = c(0,0)
b=0
l_rate =0.001
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,4,0.01)
y = -(a[2]*x +a[1])/a[3]
plot(f)
lines(x,y,type='l')
w = c(0,0)
b=0
l_rate =0.001
f = matrix(c(1,1,2,2,3,3,1.5,0.5,3,1,3.01,2.8),ncol=2)
t = c(1,-1,1,-1,1,-1)
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,4,0.01)
y = -(a[2]*x +a[1])/a[3]
plot(f)
lines(x,y,type='l')
?MyData
library(StatComp20042)
w = c(0,0)
b=0
f = as.matrix(MyData[,c(1,2)])
t = MyData$target
f
l_rate =0.001
gradientDescent(w,b,l_rate,f,t)
library(StatComp20042)
w = c(0,0)
b=0
f = as.matrix(MyData[,c(1,2)])
t = MyData$target
l_rate =0.001
gradientDescent(w,b,l_rate,f,t)
f
t
MyData
t = MyData$Species
l_rate =0.001
gradientDescent(w,b,l_rate,f,t)
f
f[,1]
plot(f[,1],f[,2])
load("D:/Development/StatComp20042/data/MyData.rda")
MyData
iris
c(1,2)*c(4,5)
c(1,2) %*% c(4,5)
iris
myData
load("D:/Development/StatComp20042/data/MyData.rda")
MyData
nrow(iris)
ncol(iris)
for(i in 1:3){print(i)}
iris
iris[2,]
iris[1,]
devtools::document()
devtools::document()
build()
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(StatComp20042)
w = c(0,0)
b=0
f = as.matrix(MyData[,c(1,2)])
t = MyData$Species
f
t
gradientDescent(w,b,l_rate,f,t)
l_rate=0.001
t = MyData$Species
gradientDescent(w,b,l_rate,f,t)
gradientDescentR(w,b,l_rate,f,t)
microbenchmark(gradientDescent(w,b,l_rate,f,t),
gradientDescentR(w,b,l_rate,f,t))
library(microbenchmark)
microbenchmark(gradientDescent(w,b,l_rate,f,t),
gradientDescentR(w,b,l_rate,f,t))
MyData
library(StatComp20042)
MyData
class(MyData)
w=c(0,0)
b=0
b=0
MyData[,c(1,2)]
f = MyData[,c(1,2)]
t = MyData$Species
l_rate=0.001
gradientDescent(w,b,l_rate,f,t)
t
gradientDescent(w,b,l_rate,as.matrix(f),t)
gradientDescentR(w,b,l_rate,as.matrix(f),t)
gradientDescentR(w,b,l_rate,f,t)
MyData
MyData
as.Matrix(MyData)
as.matrix(MyData)
iris_trim  <- as.matrix(MyData)
usethis::use_data(iris_trim)
devtools::document
devtools::document()
devtools::document()
devtools::document()
devtools::build()
iris
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
list(iris_trim)
class(iris_trim)
iris_trim.names
names(iris_trim)
iris_trim['Species']
iris_trim
iris
iris_trim
iris_trim
plot(iris_trim)
attach(iris_trim)
attach(as.DataFrame(iris_trim))
attach(as.daataframe(iris_trim))
attach(as.daata.frame(iris_trim))
attach(as.data.frame(iris_trim))
Species
head(iris_trim)
plot(Sepal.Length,Sepal.Width,colur=Specied)
plot(Sepal.Length,Sepal.Width,colur=Species)
plot(Sepal.Length,Sepal.Width,colour=Species)
plot(Sepal.Length,Sepal.Width,colour=Species,data=iris_trim)
plot(Sepal.Length,Sepal.Width,colour=Species,data=as.data.frame(iris_trim))
qplot(Sepal.Length,Sepal.Width,colour=Species,data=as.data.frame(iris_trim))
??qplot
library(e1071); library(ggplot2)
library(ggplot2)
qplot(Sepal.Length,Sepal.Width,colour=Species,data=as.data.frame(iris_trim))
head(iris_trim)
iris_trim$Species_factor = as.factor(iris_trim$Species)
ggplot(data=iris_trim) + geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=Species))
iris_trim
dataPlot <- as.data.frame(iris_trim)
dataPlot$Species_factor = as.factor(dataPlot$Species)
ggplot(data=dataPlot) + geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=Species_factor))
library(ggplot2)
library(StatComp20042)
dataPlot <- as.data.frame(iris_trim)
dataPlot$Species_factor = as.factor(dataPlot$Species)
ggplot(data=dataPlot) + geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=Species_factor))
# set initial values and learning rate
w = c(0,0);b=0;l_rate=0.001;
# set the input data:feature and target
f = iris_trim[,c(1,2)]
t = iris_trim[,3]
# executon algorithm
resultR <- perceptronR(w,b,l_rate,f,t)
resultC <- perceptronC(w,b,l_rate,f,t)
resultR
devtools::document()
devtools::document()
devtools::check()
devtools::build()
library(StatComp20042)
# set initial values and learning rate
w = c(0,0);b=0;l_rate=0.001;
# set the input data:feature and target
f = iris_trim[,c(1,2)]
t = iris_trim[,3]
# executon algorithm
resultR <- perceptronR(w,b,l_rate,f,t)
resultC <- perceptronC(w,b,l_rate,f,t)
# show
w
t
f
t
resultR
resultC
resultC
resultR
resultC
resultR
resultR[[1]][1]
resultR[[1]][2]
resultR[[1]]["Sepal.Length"]
iris_trim
iris_trim[,1]
cbind(iris_trim[,1],iris_trim[,2],iris_tr)
cbind(iris_trim[,1],iris_trim[,2],iris_trim[,3])
x <- cbind(iris_trim[,1],iris_trim[,2],iris_trim[,3])
type(x)
class(x)
matrix(c(x[,1],x[,2],x[,3]),ncol = 3)
y <- matrix(c(x[,1],x[,2],x[,3]),ncol = 3)
class(y)
y
matrix(c(1,2),ncol = 1)
class(matrix(c(1,2),ncol = 1))
matrix(c(1,2),ncol = 1)
y
iris_trim <- y
iris_trim
iris_trim
iris_trim
usethis::use_data(iris_trim,overwrite = T)
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
devtools::document()
resultC
resultR
devtools::build()
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
as.data.frame(iris_trim)
dataPlot <- as.data.frame(iris_trim)
dataPlot
names(dataPlot)
head(iris)
devtools::build()
remove.packages("StatComp20042")
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
devtools::document()
devtools::build()
df
df
library(ggplot2)
library(StatComp20042)
dataPlot <- as.data.frame(iris_trim)
names(dataPlot) <- c("Sepal.Length","Sepal.Width","Species")
dataPlot$Species_factor = as.factor(dataPlot$Species)
ggplot(data=dataPlot) + geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=Species_factor))
df
dfShow
devtools::install_github("josephcui/StatComp20042",build_vignettes = TRUE,force=T)
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
devtools::install_github("josephcui/StatComp20042",build_vignettes = TRUE,force=T)
?StatComp20042
gnb <- function(train) {
train_X = train[,-ncol(train)]
train_y = train[,ncol(train)]
tar <- unique(train_y)
prior_list <- NULL
std_matrix <- NULL
mean_matrix <- NULL
for (i in 1:length(tar)) {
prior <- sum(train_y==tar[i])/length(train_y)
tem <- train_X[train_y==tar[i],]
std_list <- apply(tem,2,function(x) sqrt(var(x)))
mean_list <- apply(tem,2,mean)
prior_list <- append(prior_list,prior)
std_matrix <- cbind(std_matrix,std_list)
mean_matrix <- cbind(mean_matrix,mean_list)
names(prior_list)[i] <- paste0('prior_prob_category_',i)
colnames(std_matrix)[i] <- paste0('std_under_category_',i)
colnames(mean_matrix)[i] <- paste0('mean_under_category_',i)
}
return(list(prior_list,mean_matrix,std_matrix))
}
train
devtools::document()
devtools::check()
var()
var(1,2)
var(c(1,2))
devtools::document()
devtools::build()
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
iris
iris[1:100,]
iris_trim
iris[1:100,]
iris
df <- iris[1:100,]
df$category <- c(rep(-1,50),rep(1,50))
df
library(ggplot2)
library(dplyr)
df %>% select(-5)
df
df <- df %>% select(-5)
df
as.matrix(df)
df <- as.matrix(df)
iris_trim <- df
usethis::use_data(iris_trim)
head(iris_trim,3)
devtools::document()
devtools::document()
rm(list=c("df"))
devtools::document()
iris_trim
train_test_split(iris_trim, 0.8,112)
devtools::document()
train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)
train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)[1]
train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)[[1]]
class(train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)[[1]])
# Data preprocessing
trian_and_test <- train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)
train <- train_and_test[[1]]
# Data preprocessing
train_and_test <- train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)
train <- train_and_test[[1]]
test <- train_and_test[[2]]
# Fit gnb model
gnb_list = gnb_fit(train)
gnb_pre(test[1,-5],gnb_list)
# Data preprocessing
train_and_test <- train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)
train <- train_and_test[[1]]
test <- train_and_test[[2]]
# Fit gnb model
gnb_list = gnb_fit(train)
print(gnb_list)
# Predict
gnb_pre(test[1,-5],gnb_list)
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
iris_trim
w = c(0,0);b=0;l_rate=0.001;
# set the input data:feature and target
f = iris_trim[,c(1,2)]
t = iris_trim[,3]
# executon algorithm
resultR <- perceptronR(w,b,l_rate,f,t)
resultC <- perceptronC(w,b,l_rate,f,t)
resultR
resultC
load("D:/Development/StatComp20042/data/iris_trim.rda")
w = c(0,0);b=0;l_rate=0.001;
# set the input data:feature and target
f = iris_trim[,c(1,2)]
t = iris_trim[,3]
# executon algorithm
resultR <- perceptronR(w,b,l_rate,f,t)
resultC <- perceptronC(w,b,l_rate,f,t)
resultR
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
as.data.frame(iris_trim)
library(ggplot2)
library(StatComp20042)
dataPlot <- as.data.frame(iris_trim)
dataPlot$category_factor = as.factor(dataPlot$category)
ggplot(data=dataPlot) + geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=category_factor))
# set initial values and learning rate
w = c(0,0);b=0;l_rate=0.001;
# set the input data:feature and target
f = iris_trim[,c(1,2)]
t = iris_trim[,3]
# executon algorithm
resultR <- perceptronR(w,b,l_rate,f,t)
resultC <- perceptronC(w,b,l_rate,f,t)
# show
dfShow = data.frame(d =c(0,0),w1=c(0,0),w2=c(0,0))
dfShow[1,]=array(resultC)
dfShow[2,] = array(c(resultR[[2]],resultR[[1]]))
knitr::kable(dfShow)
ggplot(data=dataPlot) +
geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=category_factor))+
geom_abline(intercept = -resultC[1]/resultC[3], slope = -resultC[2]/resultC[3], color="red")
result
resultC
iris_trim
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
class(iris_trim)
pre_list
# fit
gnb_fit <- function(train) {
train_X = train[,-ncol(train)]
train_y = train[,ncol(train)]
tar <- unique(train_y)
prior_list <- NULL
std_matrix <- NULL
mean_matrix <- NULL
for (i in 1:length(tar)) {
prior <- sum(train_y==tar[i])/length(train_y)
tem <- train_X[train_y==tar[i],]
std_list <- apply(tem,2,function(x) sqrt(var(x)))
mean_list <- apply(tem,2,mean)
prior_list <- append(prior_list,prior)
std_matrix <- cbind(std_matrix,std_list)
mean_matrix <- cbind(mean_matrix,mean_list)
names(tar)[i] <- paste0('category_',i)
names(prior_list)[i] <- paste0('prior_prob_category_',i)
colnames(std_matrix)[i] <- paste0('std_under_category_',i)
colnames(mean_matrix)[i] <- paste0('mean_under_category_',i)
}
return(list('Category'=tar,'Prior Distribution'=prior_list,'Mean Matrix'=mean_matrix,'Std Matrix'=std_matrix))
}
# predict
gnb_pre <- function(test_array,gnb_list){
cat_num <- length(gnb_list$`Prior Distribution`)
prob_list = numeric(cat_num)
for (i in 1:cat_num) {
prior <- gnb_list$`Prior Distribution`[i]
con_prob <- 1
for (j in 1:length(test_array)){
tem_mean <- gnb_list$`Mean Matrix`[j,i]
tem_std <- gnb_list$`Std Matrix`[j,i]
con_prob <- con_prob * gaussian_probability(test_array[j],tem_mean,tem_std)
}
prob_list[i] <- prior * con_prob
}
index <- match(max(prob_list),prob_list)
if (length(index)>1) {
index <- index[sample(1:length(index),1)]
}
return(gnb_list$`Category`[index])
}
# Data preprocessing
train_and_test <- train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)
library(StatComp20042)
# Data preprocessing
train_and_test <- train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)
train <- train_and_test[[1]]
test <- train_and_test[[2]]
# Fit gnb model
gnb_list = gnb_fit(train)
print(gnb_list)
# Predict
pre_list = NULL
for (i in 1:nrow(test)){
append(pre_list,gnb_pre(test[i,-5],gnb_list))
}
print(cbind(test,pre_list))
pre_list
gnb_pre(test[1,-5],gnb_list)
append(pre_list,gnb_pre(test[1,-5],gnb_list))
pre_list
# Data preprocessing
train_and_test <- train_test_split(raw_data=iris_trim, train_size=0.8, raw_seed=112)
train <- train_and_test[[1]]
test <- train_and_test[[2]]
# Fit gnb model
gnb_list = gnb_fit(train)
print(gnb_list)
# Predict
pre_list = NULL
for (i in 1:nrow(test)){
pre_list <- append(pre_list,gnb_pre(test[i,-5],gnb_list))
}
print(cbind(test,pre_list))
pre_list
prelist[1]==-1
pre_list[1]==-1
pre_list==-1
sum(pre_list==-1)
sum(pre_list==1)
test
test[,3]
test[,4]
test[,5]
test[,5]-pre_list
test[,5]
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::build_vignettes()
devtools::build()
devtools::build()
