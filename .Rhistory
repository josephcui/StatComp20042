timesTwo(100)
devtools::check()
library(pkgbuild)
build()
devtools::build_vignettes()
devtools::documnet
devtools::documnet()
devtools::document()
devtools::document()
devtools::check()
build()
build()
library(StatComp20042)
sumtwo(1,2)
install.packages(D:/Development/StatComp20042_0.0.0.9000.tar.gz,repos = NULL,type = "source")
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
remove.packages(StatComp20042)
remove.packages("StatComp20042")
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(StatComp20042)
sumtwo(2,3)
timesTwo(3)
timesTwo2(1)
??timesTwo
?StatComp20042
??timesTwo
devtools::document()
devtools::check()
[1,2]
matrix(data=(1,2,3,4),ncol=2)
matrix(data=c(1,2,3,4),ncol=2)
document()
devtools::document()
devtools::document()
devtools::check()
.Last.error.trace
devtools::check()
devtools::documnet
devtools::document()
build()
devtools::build()
remove.packages("StatComp20042")
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = F)
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = F)
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(StatComp20042)
??sumtwo
gradientDescent(1,2,3,matrix(data=c(1,2,3,4),ncol=2))
gradientDescent(1,2,3,11)
gradientDescent(1,2,3,matrix(data=c(1,2,3,4),ncol=4))
build()
devtools::build()
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(StatComp20042)
??sumtwo
??sumtwo
gradientDescent(1,2,3,matrix(c(1,2,3,4),col=2))
gradientDescent(1,2,3,matrix(c(1,2,3,4),ncol=2))
matrix(c(1,2,3,4),ncol=2)
matrix(c(1,2,3,4,5,6),ncol=2)
matrix(c(1,2,3,4,5,6),ncol=3)
gradientDescent(1,2,3,matrix(c(1,2,3,4,5,6),ncol=3))
library(StatComp20042)
??sumtwo
sumtwo(1,2)
remove.packages("StatComp20042")
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
remove.packages("StatComp20042")
check()
devtools::check()
devtools::build()
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
devtools::build()
devtools
devtools::build()
matrix(c(1,1,2,2,1.5,0.5,3,1),ncol=2)
c(1,-1,1,-1)
f = matrix(c(1,1,2,2,1.5,0.5,3,1),ncol=2)
t = c(1,-1,1,-1)
library(StatComp20042)
f = matrix(c(1,1,2,2,1.5,0.5,3,1),ncol=2)
t = c(1,-1,1,-1)
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(StatComp20042)
w = c(0,0)
b=0
l_rate =0.1
gradientDescent(w,b,l_rate,f,t)
x = seq(0,3,0.01)
x
a =gradientDescent(w,b,l_rate,f,t)
y =
a
a
y = -(a[2]*x +a[1])/a[3]
y
plot(x,y,type='l')
points(f)
points(f)
plot(f)
plot(f,col=t)
colorf = c(1,2,1,2)
plot(f,colorf)
plot(f,colorf)
plot(f)
abline(x,y,type='l')
lines(x,y,type='l')
f = matrix(c(1,1,2,2,3,3,1.5,0.5,3,1,2.9,3.1),ncol=2)
f = matrix(c(1,1,2,2,3,3,1.5,0.5,3,1,2.9,3.1),ncol=2)
f
f = matrix(c(1,1,2,2,3,3,1.5,0.5,3,1,3.1,2.8),ncol=2)
t = c(1,-1,1,-1,1,-1)
t
w = c(0,0)
b=0
l_rate =0.001
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,3,0.01)
y = -(a[2]*x +a[1])/a[3]
plot(f)
lines(x,y,type='l')
x = seq(0,4,0.01)
y = -(a[2]*x +a[1])/a[3]
plot(f)
lines(x,y,type='l')
f = matrix(c(1,1,2,2,3,3,1.5,0.5,3,1,3.01,2.8),ncol=2)
t = c(1,-1,1,-1,1,-1)
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(StatComp20042)
w = c(0,0)
b=0
l_rate =0.001
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,4,0.01)
y = -(a[2]*x +a[1])/a[3]
plot(f)
lines(x,y,type='l')
library(stat)
library(stats)
runif(0,10,50)
runif(0,100,50)
runif(100,0,20)
sort(runif(100,0,20))
iris
head(iris,100)
library(dplyr)
df = head(iris,100)
df
df = head(iris,100) %>% select(1,2)
df
df$target = c(rep(1,50),rep(-1,50))
df
plot(df)
plot(df$Sepal.Length,df$Sepal.Width)
library(ggplot)
install.packages("ggplot")
library(ggplot)
install.packages("ggplot2")
library(ggplot2)
ggplot(df) +geom_point(aes(x=df$Sepal.Length,y=df$Sepal.Width))
ggplot(df) +geom_point(aes(x=Sepal.Length,y=dSepal.Width))
df$
ggplot(df) +geom_point(aes(x=df$Sepal.Length,y=df$Sepal.Width))
ggplot(df) +geom_point(aes(x=df$Sepal.Length,y=df$Sepal.Width))
ggplot(df) +geom_point(data=df,aes(x=df$Sepal.Length,y=df$Sepal.Width))
ggplot(df) +geom_point(data=df,aes(x=Sepal.Length,y=df$Sepal.Width))
ggplot(df) +geom_point(data=df,aes(x=Sepal.Length,y=Sepal.Width))
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width))
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=target))
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width),color=target)
df
df$target
df$target <- as.factor(df$target)
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width),color=target)
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=target))
f= as.matrix(df[:c(1,2)])
f
f= as.matrix(df[,c(1,2)])
f
t = df$target
w = c(0,0)
b=0
l_rate =0.001
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,10,0.01)
y = -(a[2]*x +a[1])/a[3]
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=target))
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=target)) + geom_abline(data=c(x,y))
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=target))
abline(x,y)
plot(df$Sepal.Length,df$Sepal.Width)
abline(x,y)
f= as.matrix(df[,c(1,2)])
t = df$target
f
t
w = c(0,0)
b=0
l_rate =0.001
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,10,0.01)
y = -(a[2]*x +a[1])/a[3]
plot(x,y)
a
f = matrix(c(1,1,2,2,3,3,1.5,0.5,3,1,3.01,2.8),ncol=2)
t = c(1,-1,1,-1,1,-1)
library(StatComp20042)
w = c(0,0)
b=0
l_rate =0.001
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,4,0.01)
y = -(a[2]*x +a[1])/a[3]
plot(f)
lines(x,y,type='l')
a
f
library(dplyr)
df = head(iris,100) %>% select(1,2)
df$target = c(rep(1,50),rep(-1,50))
library(ggplot2)
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=target))
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=target))
f= as.matrix(df[,c(1,2)])
t = df$target
w = c(0,0)
b=0
l_rate =0.001
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,10,0.01)
y = -(a[2]*x +a[1])/a[3]
ggplot(df) +geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=target))
plot(df$Sepal.Length,df$Sepal.Width)
abline(x,y)
plot(x,y)
plot(df$Sepal.Length,df$Sepal.Width)
plot(x,y)
lines(x,y)
plot(df$Sepal.Length,df$Sepal.Width)
lines(x,y)
plot(df$Sepal.Length,df$Sepal.Width,pch=1)
plot(df$Sepal.Length,df$Sepal.Width,pch=0.1)
plot(df$Sepal.Length,df$Sepal.Width,pch=0.01)
plot(df$Sepal.Length,df$Sepal.Width,pch=1)
plot(df$Sepal.Length,df$Sepal.Width)
lines(x,y)
df
library(dplyr)
df = head(iris,100) %>% select(1,2)
df
iris
df$Species = c(rep(1,50),rep(-1,50))
df
df
usethis::use_data(df,MyData)
df
sample(1000)
df
usethis::use_data(mydataset, df, overwrite = T)
usethis::use_data(df, mydata, overwrite = T)
df
MyData = df
usethis::use_data(MyData, overwrite = T)
usethis::use_data(MyData, overwrite = T)
load("D:/Development/StatComp20042/data/MyData.rda")
MyData
install.packages("sinew")
sinew::makeOxygen(MyData, add_fields = "source")
?iris
devtools::document()
MyData
devtools::check()
devtools::build()
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(StatComp20042)
w = c(0,0)
b=0
l_rate =0.001
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,4,0.01)
y = -(a[2]*x +a[1])/a[3]
plot(f)
lines(x,y,type='l')
w = c(0,0)
b=0
l_rate =0.001
f = matrix(c(1,1,2,2,3,3,1.5,0.5,3,1,3.01,2.8),ncol=2)
t = c(1,-1,1,-1,1,-1)
a =gradientDescent(w,b,l_rate,f,t)
a
x = seq(0,4,0.01)
y = -(a[2]*x +a[1])/a[3]
plot(f)
lines(x,y,type='l')
?MyData
library(StatComp20042)
w = c(0,0)
b=0
f = as.matrix(MyData[,c(1,2)])
t = MyData$target
f
l_rate =0.001
gradientDescent(w,b,l_rate,f,t)
library(StatComp20042)
w = c(0,0)
b=0
f = as.matrix(MyData[,c(1,2)])
t = MyData$target
l_rate =0.001
gradientDescent(w,b,l_rate,f,t)
f
t
MyData
t = MyData$Species
l_rate =0.001
gradientDescent(w,b,l_rate,f,t)
f
f[,1]
plot(f[,1],f[,2])
load("D:/Development/StatComp20042/data/MyData.rda")
MyData
iris
c(1,2)*c(4,5)
c(1,2) %*% c(4,5)
iris
myData
load("D:/Development/StatComp20042/data/MyData.rda")
MyData
nrow(iris)
ncol(iris)
for(i in 1:3){print(i)}
iris
iris[2,]
iris[1,]
devtools::document()
devtools::document()
build()
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(StatComp20042)
w = c(0,0)
b=0
f = as.matrix(MyData[,c(1,2)])
t = MyData$Species
f
t
gradientDescent(w,b,l_rate,f,t)
l_rate=0.001
t = MyData$Species
gradientDescent(w,b,l_rate,f,t)
gradientDescentR(w,b,l_rate,f,t)
microbenchmark(gradientDescent(w,b,l_rate,f,t),
gradientDescentR(w,b,l_rate,f,t))
library(microbenchmark)
microbenchmark(gradientDescent(w,b,l_rate,f,t),
gradientDescentR(w,b,l_rate,f,t))
MyData
library(StatComp20042)
MyData
class(MyData)
w=c(0,0)
b=0
b=0
MyData[,c(1,2)]
f = MyData[,c(1,2)]
t = MyData$Species
l_rate=0.001
gradientDescent(w,b,l_rate,f,t)
t
gradientDescent(w,b,l_rate,as.matrix(f),t)
gradientDescentR(w,b,l_rate,as.matrix(f),t)
gradientDescentR(w,b,l_rate,f,t)
MyData
MyData
as.Matrix(MyData)
as.matrix(MyData)
iris_trim  <- as.matrix(MyData)
usethis::use_data(iris_trim)
devtools::document
devtools::document()
devtools::document()
devtools::document()
devtools::build()
iris
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
list(iris_trim)
class(iris_trim)
iris_trim.names
names(iris_trim)
iris_trim['Species']
iris_trim
iris
iris_trim
iris_trim
plot(iris_trim)
attach(iris_trim)
attach(as.DataFrame(iris_trim))
attach(as.daataframe(iris_trim))
attach(as.daata.frame(iris_trim))
attach(as.data.frame(iris_trim))
Species
head(iris_trim)
plot(Sepal.Length,Sepal.Width,colur=Specied)
plot(Sepal.Length,Sepal.Width,colur=Species)
plot(Sepal.Length,Sepal.Width,colour=Species)
plot(Sepal.Length,Sepal.Width,colour=Species,data=iris_trim)
plot(Sepal.Length,Sepal.Width,colour=Species,data=as.data.frame(iris_trim))
qplot(Sepal.Length,Sepal.Width,colour=Species,data=as.data.frame(iris_trim))
??qplot
library(e1071); library(ggplot2)
library(ggplot2)
qplot(Sepal.Length,Sepal.Width,colour=Species,data=as.data.frame(iris_trim))
head(iris_trim)
iris_trim$Species_factor = as.factor(iris_trim$Species)
ggplot(data=iris_trim) + geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=Species))
iris_trim
dataPlot <- as.data.frame(iris_trim)
dataPlot$Species_factor = as.factor(dataPlot$Species)
ggplot(data=dataPlot) + geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=Species_factor))
library(ggplot2)
library(StatComp20042)
dataPlot <- as.data.frame(iris_trim)
dataPlot$Species_factor = as.factor(dataPlot$Species)
ggplot(data=dataPlot) + geom_point(aes(x=Sepal.Length,y=Sepal.Width,color=Species_factor))
# set initial values and learning rate
w = c(0,0);b=0;l_rate=0.001;
# set the input data:feature and target
f = iris_trim[,c(1,2)]
t = iris_trim[,3]
# executon algorithm
resultR <- perceptronR(w,b,l_rate,f,t)
resultC <- perceptronC(w,b,l_rate,f,t)
resultR
devtools::document()
devtools::document()
devtools::check()
devtools::build()
library(StatComp20042)
# set initial values and learning rate
w = c(0,0);b=0;l_rate=0.001;
# set the input data:feature and target
f = iris_trim[,c(1,2)]
t = iris_trim[,3]
# executon algorithm
resultR <- perceptronR(w,b,l_rate,f,t)
resultC <- perceptronC(w,b,l_rate,f,t)
# show
w
t
f
t
resultR
resultC
resultC
resultR
resultC
resultR
resultR[[1]][1]
resultR[[1]][2]
resultR[[1]]["Sepal.Length"]
iris_trim
iris_trim[,1]
cbind(iris_trim[,1],iris_trim[,2],iris_tr)
cbind(iris_trim[,1],iris_trim[,2],iris_trim[,3])
x <- cbind(iris_trim[,1],iris_trim[,2],iris_trim[,3])
type(x)
class(x)
matrix(c(x[,1],x[,2],x[,3]),ncol = 3)
y <- matrix(c(x[,1],x[,2],x[,3]),ncol = 3)
class(y)
y
matrix(c(1,2),ncol = 1)
class(matrix(c(1,2),ncol = 1))
matrix(c(1,2),ncol = 1)
y
iris_trim <- y
iris_trim
iris_trim
iris_trim
usethis::use_data(iris_trim,overwrite = T)
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
devtools::document()
resultC
resultR
devtools::build()
load("D:/Development/StatComp20042/data/iris_trim.rda")
iris_trim
as.data.frame(iris_trim)
dataPlot <- as.data.frame(iris_trim)
dataPlot
names(dataPlot)
head(iris)
devtools::build()
remove.packages("StatComp20042")
install.packages("D:/Development/StatComp20042_0.0.0.9000.tar.gz",repos = NULL,type = "source")
devtools::document()
devtools::build()
